// forked from 5ivestar's Emotion Fractal in AS3// Emotion Fractal in AS3// refer to http://levitated.net/daily/levEmotionFractal.htmlpackage com.food.view.header.fractal{	import caurina.transitions.Tweener;	import caurina.transitions.properties.TextShortcuts;		import com.adobe.serialization.json.JSON;	import com.food.contoller.events.NutritionEvent;	import com.food.model.data.Config;	import com.food.model.data.DataNutrient;	import com.food.model.data.Singleton;		import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFormat;		import org.casalib.util.StageReference;
	public class EmotionFractal extends Sprite {		public var color		:Number;		public var font			:Font;		private var queue		:Array;		protected var words		:Vector.<DataNutrient>;				public function EmotionFractal( ) {			words = Singleton.instance.vectorNutrients;						TextShortcuts.init();		}				public function init():void {						destroyEmotionFractal();			queue = [new Rectangle(0, 0, stage.stageWidth-20, Config.HEADER_HEIGHT-20 )];			addEventListener(Event.ENTER_FRAME, fill);		}				public function destroyEmotionFractal():void{			Tweener.removeAllTweens();			while (numChildren) removeChildAt(0);			removeEventListener(Event.ENTER_FRAME, fill);			//words = null;			//queue = null;			//font = null;					}		public function fill(e:Event):void {			var i:int = 0;			while (queue.length > 0 && i < 3) {				var rect:Rectangle = queue.pop();				if (rect.width > 2 && rect.height > 2) {					fillRegion(rect);										i++;				}			}			if (!queue.length) removeEventListener(Event.ENTER_FRAME, fill);		}		public function fillRegion(region:Rectangle):void {			var tf:TextField = new TextField();			var fmt:TextFormat = new TextFormat();			fmt.font = this.font.fontName;			fmt.size = 24;			fmt.letterSpacing = -0.4;						fmt.leading = -5;			fmt.rightMargin = 0.4;			tf.defaultTextFormat = fmt;			tf.mouseEnabled = false;									tf.textColor = this.color;			var randNumber:Number = choiceByWeight();						var word:String = words[ randNumber ].NT_NME.toUpperCase();									var nutritionWord:NutritionWord = new NutritionWord();			nutritionWord.addEventListener(NutritionEvent.CHANGE_NUTRIENT, nutritionChangedHandler, false, 0, true );									nutritionWord.dataNutrient = words[ randNumber ];			this.addChild( nutritionWord );						tf.text = word;						tf.autoSize = "left";			tf.embedFonts = true;			tf.selectable = false;			var bitmap:BitmapData = new BitmapData(tf.width, tf.height, true);			bitmap.draw(tf);			var bound:Rectangle = bitmap.getColorBoundsRect(this.color, this.color, false);			bitmap.dispose();									var s:Number = region.width / bound.width * (Math.random() * 0.4 + 0.1);						if (bound.height * s > region.height) s = region.height / bound.height;			tf.scaleX = s;			tf.scaleY = s;			bound.x *= s;			bound.y *= s;			bound.width  *= s;			bound.height *= s;						if( s < .25 ){				tf.alpha = .35;			}						switch (choice([1,2,3,4])) {				case 1:					tf.x = region.x - bound.x;					tf.y = region.y - bound.y;					queue.push(						new Rectangle(region.x + bound.width, region.y, region.width - bound.width, bound.height),						new Rectangle(region.x, region.y + bound.height, region.width, region.height - bound.height)					);					break;				case 2:					tf.x = region.x - bound.x;					tf.y = region.bottom - bound.bottom;					queue.push(						new Rectangle(region.x + bound.width, region.bottom - bound.height, region.width - bound.width, bound.height),						new Rectangle(region.x, region.y, region.width, region.height - bound.height)					);					break;				case 3:					tf.x = region.right - bound.right;					tf.y = region.y - bound.y;					queue.push(						new Rectangle(region.x, region.y, region.width - bound.width, bound.height),						new Rectangle(region.x, region.y + bound.height, region.width, region.height - bound.height)					);					break;				case 4:					tf.x = region.right - bound.right;					tf.y = region.bottom - bound.bottom;					queue.push(						new Rectangle(region.x, region.bottom - bound.height, region.width - bound.width, bound.height),						new Rectangle(region.x, region.y, region.width, region.height - bound.height)					);					break;			}			nutritionWord.addChild(tf);			Tweener.addTween(tf, {_text_color: this.color, time: 1, transition: "liner"});					}				public function nutritionChangedHandler( e:NutritionEvent ):void		{			this.mouseEnabled = false;			this.mouseChildren = false;		}				private function choice(ary:Array):* {			return ary[Math.floor(ary.length * Math.random())];		}				private function choiceByWeight():Number		{			var rand:Number = Math.random();			var min:Number = 0;			var max:Number = 0;			var returnRand:Number;			var sum:Number = 0;									for( var i:uint=0;i<words.length;i++ ){								max += words[i].percent;					sum += words[i].percent;								if( rand > min && rand < max ){					returnRand = i;									}								min = max;							}															//return Math.round(rand);						return returnRand;		}	}}